// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eBookStore.BusinessObjects.Context;

#nullable disable

namespace eBookStore.BusinessObjects.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240819044923_Second")]
    partial class Second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Book", b =>
                {
                    b.Property<string>("BookId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("book_id");

                    b.Property<string>("Advance")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("advance");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<DateOnly>("PublishedDate")
                        .HasColumnType("date")
                        .HasColumnName("published_date");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("pub_id");

                    b.Property<int>("Royalty")
                        .HasColumnType("int")
                        .HasColumnName("royalty");

                    b.Property<int>("Sale")
                        .HasColumnType("int")
                        .HasColumnName("ytd_sales");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("BookId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = "1",
                            Advance = "5000",
                            Note = "First Edition",
                            Price = 19.99m,
                            PublishedDate = new DateOnly(2024, 1, 15),
                            PublisherId = "1",
                            Royalty = 10,
                            Sale = 50,
                            Title = "The Great Adventure",
                            Type = "Fiction"
                        },
                        new
                        {
                            BookId = "2",
                            Advance = "3000",
                            Note = "Second Edition",
                            Price = 29.99m,
                            PublishedDate = new DateOnly(2024, 5, 22),
                            PublisherId = "2",
                            Royalty = 12,
                            Sale = 50,
                            Title = "Learning C#",
                            Type = "Education"
                        });
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.Author", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("author_id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("zip");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = "1",
                            Address = "123 Main St",
                            City = "Anytown",
                            Email = "john.smith@example.com",
                            FirstName = "John",
                            LastName = "Smith",
                            Phone = "123-456-7890",
                            State = "CA",
                            Zip = "12345"
                        },
                        new
                        {
                            AuthorId = "2",
                            Address = "456 Elm St",
                            City = "Othertown",
                            Email = "jane.doe@example.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Phone = "987-654-3210",
                            State = "NY",
                            Zip = "67890"
                        });
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.BookAuthor", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("author_id");

                    b.Property<string>("BookId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("book_id");

                    b.Property<int?>("AuthorOrder")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("author_order");

                    b.Property<decimal?>("RoyaltyPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("royalty_percentage");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            AuthorId = "1",
                            BookId = "1",
                            AuthorOrder = 1,
                            RoyaltyPercentage = 0.5m
                        },
                        new
                        {
                            AuthorId = "2",
                            BookId = "2",
                            AuthorOrder = 2,
                            RoyaltyPercentage = 0.5m
                        });
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.Publisher", b =>
                {
                    b.Property<string>("PublisherId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("pub_id");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("publisher_name");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("state");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = "1",
                            City = "Anytown",
                            Country = "USA",
                            PublisherName = "Publisher 1",
                            State = "CA"
                        },
                        new
                        {
                            PublisherId = "2",
                            City = "Othertown",
                            Country = "USA",
                            PublisherName = "Publisher 2",
                            State = "NY"
                        });
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("role_desc");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = "1",
                            RoleDescription = "Administrator",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = "2",
                            RoleDescription = "Regular User",
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("publisher_id");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("role_id");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("source");

                    b.HasKey("UserId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            Address = "123 Main St",
                            Email = "john.public@example.com",
                            FirstName = "John",
                            HireDate = new DateOnly(2023, 1, 1),
                            LastName = "Public",
                            MiddleName = "Q",
                            Password = "12345",
                            PublisherId = "1",
                            RoleId = "1",
                            Source = "Local"
                        },
                        new
                        {
                            UserId = "2",
                            Address = "456 Elm St",
                            Email = "jane.doe@example.com",
                            FirstName = "Jane",
                            HireDate = new DateOnly(2023, 2, 1),
                            LastName = "Doe",
                            MiddleName = "A",
                            Password = "67890",
                            PublisherId = "2",
                            RoleId = "2",
                            Source = "Local"
                        });
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.HasOne("eBookStore.BusinessObjects.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.BookAuthor", b =>
                {
                    b.HasOne("eBookStore.BusinessObjects.Entities.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.User", b =>
                {
                    b.HasOne("eBookStore.BusinessObjects.Entities.Publisher", "Publisher")
                        .WithMany("Users")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBookStore.BusinessObjects.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.Publisher", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("eBookStore.BusinessObjects.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
